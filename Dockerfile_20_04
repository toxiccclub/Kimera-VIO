# Указываем базовый образ для архитектуры ARM64
FROM --platform=linux/arm64 ubuntu:22.04

# Метаданные об обслуживании образа
LABEL maintainer="mabate@mit.edu"

# Устанавливаем переменную окружения, чтобы предотвратить запросы интерактивного ввода
ENV DEBIAN_FRONTEND=noninteractive

# Устанавливаем компиляторы
ENV C_COMPILER gcc-9.4.0
ENV CXX_COMPILER g++-9.4.0

# Обновляем список пакетов и устанавливаем базовые пакеты
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    apt-utils \
    build-essential \
    gcc-snapshot \
    cmake \
    gfortran \
    git \
    libatlas-base-dev \
    libboost-all-dev \
    libeigen3-dev \
    libgflags-dev \
    libgoogle-glog-dev \
    libmetis-dev \
    libopencv-dev \
    libopencv-contrib-dev \
    libtbb-dev \
    pkg-config \
    xvfb \
    python3 \
    python3-dev \
    python3-pip \
    python3-tk \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Загружаем исходный код CMake 3.21.0
ADD https://cmake.org/files/v3.21/cmake-3.21.0.tar.gz /tmp/cmake.tar.gz

# Распаковываем исходный код CMake
RUN mkdir /tmp/cmake && \
    tar -xzvf /tmp/cmake.tar.gz -C /tmp/cmake --strip-components=1

# Устанавливаем необходимые зависимости для сборки CMake
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    ${C_COMPILER} \
    ${CXX_COMPILER} \
    && rm -rf /var/lib/apt/lists/*

# Сборка и установка CMake с явным указанием компиляторов
RUN cd /tmp/cmake && \
    CC=${C_COMPILER} CXX=${CXX_COMPILER} ./configure && \
    make -j$(nproc) && \
    make install && \
    rm -rf /tmp/cmake /tmp/cmake.tar.gz

# Верификация установки CMake
RUN cmake --version

# Копируем патч для DBoW2
COPY .patches/fix_vocab.patch dbow2.patch

# Загружаем версию разработки репозитория GTSAM
ADD https://api.github.com/repos/borglab/gtsam/git/refs/heads/develop version.json

# Клонируем репозиторий GTSAM и устанавливаем его
RUN git clone https://github.com/borglab/gtsam.git && \
    cd gtsam && \
    git checkout 4.2 && \
    mkdir build && \
    cd build && \
    cmake -DCMAKE_SYSTEM_PROCESSOR=arm64 \
          -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DGTSAM_BUILD_WITH_MARCH_NATIVE=OFF \
          -DGTSAM_BUILD_TESTS=OFF \
          -DGTSAM_BUILD_EXAMPLES_ALWAYS=OFF \
          -DCMAKE_BUILD_TYPE=Release \
          -DGTSAM_BUILD_UNSTABLE=ON \
          -DGTSAM_POSE3_EXPMAP=ON \
          -DGTSAM_ROT3_EXPMAP=ON \
          -DGTSAM_TANGENT_PREINTEGRATION=OFF \
          -DGTSAM_USE_SYSTEM_EIGEN=ON \
          -DGTSAM_USE_SYSTEM_METIS=ON \
          .. && \
    make -j 4 install

# Загружаем версию разработки репозитория Open_GV
RUN git clone https://github.com/toxiccclub/opengv.git && \
    cd opengv && \
    git apply march_native_disable.patch && \
    mkdir build && \
    cd build && \
    cmake -DCMAKE_SYSTEM_PROCESSOR=arm64 \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/usr/local \
          .. && \
    make -j 4 install

# Клонируем репозиторий DBoW2 и устанавливаем его
RUN git clone https://github.com/dorian3d/DBoW2.git && \
    cd DBoW2 && \
    git apply ../dbow2.patch && \
    mkdir build && \
    cd build && \
    cmake -DCMAKE_SYSTEM_PROCESSOR=arm64 \
          .. && \
    make -j$(nproc) install

# Загружаем версию разработки репозитория RobustPGO
ADD https://api.github.com/repos/MIT-SPARK/Kimera-RPGO/git/refs/heads/master version.json
RUN git clone https://github.com/MIT-SPARK/Kimera-RPGO.git && \
    cd Kimera-RPGO && \
    mkdir build && \
    cd build && \
    cmake -DCMAKE_SYSTEM_PROCESSOR=arm64 \
          ..  && \
    make -j$(nproc) install

# Устанавливаем Kimera-VIO-Evaluation
RUN python3 -m pip install --upgrade pip
ADD https://api.github.com/repos/MIT-SPARK/Kimera-VIO-Evaluation/git/refs/heads/fix/python3 version.json
RUN python3 -m pip install git+https://github.com/MIT-SPARK/Kimera-VIO-Evaluation.git@fix/python3
