# Указываем базовый образ для архитектуры ARM64
FROM ubuntu:22.04

# Метаданные об обслуживании образа
LABEL maintainer="mabate@mit.edu"

# Устанавливаем переменную окружения, чтобы предотвратить запросы интерактивного ввода
ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
      apt-utils \
      cmake \
      wget \
      pkg-config \
      tar \
      xvfb \
      build-essential \
      unzip && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
      
# Скачиваем и устанавливаем Boost
RUN wget --no-check-certificate https://boostorg.jfrog.io/artifactory/main/release/1.82.0/source/boost_1_82_0.tar.gz && \
    tar xf boost_1_82_0.tar.gz && \
    rm boost_1_82_0.tar.gz && \
    cd boost_1_82_0 && \
    ./bootstrap.sh --prefix=/usr/local/boost && \
    ./b2 install

# Экспортируем переменную среды BOOST_ROOT
ENV BOOST_ROOT /usr/local/boost

RUN  apt-get update && apt-get install -y --no-install-recommends \
      libjpeg-dev \
      libpng-dev \
      libtiff-dev \
      libvtk9-dev \
      libgtk-3-dev \
      libparmetis-dev \
      libatlas-base-dev \
      gfortran \
      libtbb2-dev \
      git \
      ca-certificates && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Клонируем репозиторий GTSAM и устанавливаем его
ADD https://api.github.com/repos/borglab/gtsam/git/refs/heads/develop version.json
RUN git clone https://github.com/borglab/gtsam.git && \
    cd gtsam && \
    git checkout 4.1.1 && \
    mkdir build && \
    cd build && \
    cmake -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DGTSAM_BUILD_WITH_MARCH_NATIVE=OFF \
          -DCMAKE_BUILD_TYPE=Release \
          -DGTSAM_BUILD_UNSTABLE=ON \
          -DGTSAM_POSE3_EXPMAP=ON \
          -DGTSAM_ROT3_EXPMAP=ON \
          -DGTSAM_TANGENT_PREINTEGRATION=OFF \
          -DGTSAM_USE_SYSTEM_EIGEN=OFF \
          .. && \
    make -j$(nproc) install

# Установка зависимостей OpenCV
RUN apt-get update && \
    apt-get install -y \
      libjpeg-dev \
      libpng-dev \
      libtiff-dev \
      libavcodec-dev \
      libavformat-dev \
      libswscale-dev \
      libv4l-dev \
      libxvidcore-dev \
      libx264-dev \
      libopenexr-dev \
      libatlas-base-dev \
      gfortran \
      python3-dev \
      python3-numpy \
      libqt5opengl5-dev \
      libglew-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Клонирование репозиториев OpenCV и OpenCV_contrib
RUN git clone https://github.com/opencv/opencv.git && \
    git clone https://github.com/opencv/opencv_contrib.git && \
    cd opencv_contrib && \
    git checkout tags/4.5.5 && \
    cd ../opencv && \
    git checkout tags/4.5.5

# Создание и переход в каталог сборки
RUN mkdir -p opencv/build && \
    cd opencv/build

# Настройка сборки OpenCV с помощью CMake
RUN cd opencv/build && \
    cmake -D CMAKE_BUILD_TYPE=RELEASE \
          -D CMAKE_INSTALL_PREFIX=/usr/local \
          -D WITH_VTK=ON \
          -DWITH_TBB=ON \
          -D BUILD_opencv_viz=ON \
          -D OPENCV_EXTRA_MODULES_PATH=/opencv_contrib/modules \
           .. && \
    make -j$(nproc) install


# Загружаем версию разработки репозитория Open_GV
RUN git clone https://github.com/laurentkneip/opengv.git && \
    cd opengv && \
    mkdir build && \
    cd build && \
    cmake -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DEIGEN_INCLUDE_DIR=/gtsam/gtsam/3rdparty/Eigen \
          -DEIGEN_INCLUDE_DIRS=/gtsam/gtsam/3rdparty/Eigen \
          .. && \
    make -j$(nproc) install

# Клонируем репозиторий DBoW2 и устанавливаем его
RUN git clone https://github.com/dorian3d/DBoW2.git && \
    cd DBoW2 && \
    mkdir build && \
    cd build && \
    cmake -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DCMAKE_BUILD_TYPE=Release \
          .. && \
    make -j$(nproc) install

# Загружаем версию разработки репозитория RobustPGO
RUN git clone https://github.com/MIT-SPARK/Kimera-RPGO.git && \
    cd Kimera-RPGO && \
    mkdir build && \
    cd build && \
    cmake -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DCMAKE_BUILD_TYPE=Release \
          ..  && \
    make -j$(nproc) install

RUN apt-get update && apt-get install -y \
      libgflags-dev \
      libgoogle-glog-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN git clone https://github.com/MIT-SPARK/Kimera-VIO.git && \
    cd Kimera-VIO && \
    mkdir build && \
    cd build && \
    cmake -DCMAKE_INSTALL_PREFIX=/usr/local \
          -DCMAKE_BUILD_TYPE=Release \
          .. && \
    make -j 4
